name: Build and upload binaries to release

on:
  repository_dispatch:
    types: [tag-created]

jobs:
  release:
    name: Build and Release
    runs-on: ${{ matrix.triple.os }}
    strategy:
      matrix:
        triple:
          # x86_64 linux, bin and lib
          - { 
              os: ubuntu-latest,
              target: "x86_64-unknown-linux-gnu",
              cross: false,
              artifact_name: x86_64-unknown-linux-gnu.zip,
              asset_name: x86_64-unknown-linux-gnu.zip
            }
          # x86_64 android, bin and lib
          - {
              os: ubuntu-latest,
              target: "x86_64-linux-android",
              cross: true,
              artifact_name: x86_64-linux-android.zip,
              asset_name: x86_64-linux-android.zip
            }
          # aarch64 android, bin and lib
          - {
              os: ubuntu-latest,
              target: aarch64-linux-android,
              cross: true,
              artifact_name: aarch64-linux-android.zip,
              asset_name: aarch64-linux-android.zip
            }
          # i686 android, bin and lib
          - {
              os: ubuntu-latest,
              target: i686-linux-android,
              cross: true,
              artifact_name: i686-linux-android.zip,
              asset_name: i686-linux-android.zip
            }
          # armv7 android, bin and lib
          - {
              os: ubuntu-latest,
              target: armv7-linux-androideabi,
              cross: true,
              artifact_name: armv7-linux-androideabi.zip,
              asset_name: armv7-linux-androideabi.zip
            }
          # aarch64 ios, bin and lib
          - {
              os: macos-latest,
              target: aarch64-apple-ios,
              cross: false,
              artifact_name: aarch64-apple-ios.zip,
              asset_name: aarch64-apple-ios.zip
            }
          # x86_64 ios, bin and lib
          - {
              os: macos-latest,
              target: x86_64-apple-ios,
              cross: false,
              artifact_name: x86_64-apple-ios.zip,
              asset_name: x86_64-apple-ios.zip
            }
          # universal ios, bin and lib
          - {
              os: macos-latest,
              target: universal,
              cross: false,
              artifact_name: universal.zip,
              asset_name: universal.zip
            }

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build project
        # we can add in this too if we have time "x86_64-apple-darwin"
        run: |
          TARGET=${{ matrix.triple.target }}
          case $TARGET in
            "armv7-linux-androideabi" | aarch64-linux-android" | "x86_64-linux-android" | "i686-linux-android")
              sudo apt-get install musl-tools libssl-dev
              CURRENT=`pwd`
              mkdir -p $HOME/usr/local
              cd $HOME/usr/local
              rustup target add $TARGET
              if [ "$TARGET" == "armv7-linux-androideabi" ]
              then
                TARGET_SHORT_NAME=armeabi-v7a
                GMP_TARGET="armv7a-linux-androideabi"
                wget https://github.com/ezsyfi/gmp/releases/download/6.2.1/${GMP_TARGET}.zip
                unzip ${GMP_TARGET}.zip
                cd $CURRENT
                mkdir -p target/${TARGET}/release/deps
                cp -rf $HOME/usr/local/${GMP_TARGET}/lib/libgmp* target/${TARGET}/release/deps/
              else
                TARGET_SHORT_NAME=$TARGET
                wget https://github.com/ezsyfi/gmp/releases/download/6.2.1/${TARGET}.zip
                unzip ${TARGET}.zip
                cd $CURRENT
                mkdir -p target/${TARGET}/release/deps
                cp -rf $HOME/usr/local/${TARGET}/lib/libgmp* target/${TARGET}/release/deps/
              fi
              cargo install cargo-ndk
              cargo ndk --target $TARGET_SHORT_NAME build --lib --bin cli --release
              ;;
            "aarch64-apple-ios" | "x86_64-apple-ios")
              rustup target add $TARGET
              cargo install cargo-lipo
              cargo lipo --targets $TARGET --release
              ;;
            "universal")
              rustup target add aarch64-apple-ios x86_64-apple-ios
              cargo install cargo-lipo
              cargo lipo --release
              ;;
            *)
              sudo apt-get install musl-tools libssl-dev
              rustup target add $TARGET
              cargo build --target $TARGET --lib --bin cli --release
              ;;
          esac
          echo "See our release files"
          ls -la target/$TARGET/release
          cd target/$TARGET/release
          zip -r /tmp/${{ matrix.triple.artifact_name }} .
      - name: Upload binary to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: /tmp/${{ matrix.triple.artifact_name }}
          asset_name: ${{ matrix.triple.asset_name }}
          tag: ${{ github.event.client_payload.new_version }}
          overwrite: true